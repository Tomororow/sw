<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zyjz.bigdata.dao.BigDataConfigMapper" >
  <resultMap id="BaseResultMap" type="com.zyjz.bigdata.entity.BigDataConfig" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="rest_name" property="restName" jdbcType="VARCHAR" />
    <result column="rest_water" property="restWater" jdbcType="DECIMAL" />
    <result column="drp" property="drp" jdbcType="DECIMAL" />
    <result column="year" property="year" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="break_one" property="breakOne" jdbcType="VARCHAR" />
    <result column="break_two" property="breakTwo" jdbcType="VARCHAR" />
    <result column="break_three" property="breakThree" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, rest_name, rest_water, drp, year, type, create_time, break_one, break_two, break_three
  </sql>

  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from big_data_config
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from big_data_config
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from big_data_config
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.zyjz.bigdata.entity.BigDataConfig" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into big_data_config (id, rest_name, rest_water, 
      drp, year, type, create_time, 
      break_one, break_two, break_three
      )
    values (#{id,jdbcType=INTEGER}, #{restName,jdbcType=VARCHAR}, #{restWater,jdbcType=DECIMAL}, 
      #{drp,jdbcType=DECIMAL}, #{year,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{breakOne,jdbcType=VARCHAR}, #{breakTwo,jdbcType=VARCHAR}, #{breakThree,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zyjz.bigdata.entity.BigDataConfig" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into big_data_config
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="restName != null" >
        rest_name,
      </if>
      <if test="restWater != null" >
        rest_water,
      </if>
      <if test="drp != null" >
        drp,
      </if>
      <if test="year != null" >
        year,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="breakOne != null" >
        break_one,
      </if>
      <if test="breakTwo != null" >
        break_two,
      </if>
      <if test="breakThree != null" >
        break_three,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="restName != null" >
        #{restName,jdbcType=VARCHAR},
      </if>
      <if test="restWater != null" >
        #{restWater,jdbcType=DECIMAL},
      </if>
      <if test="drp != null" >
        #{drp,jdbcType=DECIMAL},
      </if>
      <if test="year != null" >
        #{year,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="breakOne != null" >
        #{breakOne,jdbcType=VARCHAR},
      </if>
      <if test="breakTwo != null" >
        #{breakTwo,jdbcType=VARCHAR},
      </if>
      <if test="breakThree != null" >
        #{breakThree,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.zyjz.bigdata.entity.BigDataConfig" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update big_data_config
    <set >
      <if test="restName != null" >
        rest_name = #{restName,jdbcType=VARCHAR},
      </if>
      <if test="restWater != null" >
        rest_water = #{restWater,jdbcType=DECIMAL},
      </if>
      <if test="drp != null" >
        drp = #{drp,jdbcType=DECIMAL},
      </if>
      <if test="year != null" >
        year = #{year,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="breakOne != null" >
        break_one = #{breakOne,jdbcType=VARCHAR},
      </if>
      <if test="breakTwo != null" >
        break_two = #{breakTwo,jdbcType=VARCHAR},
      </if>
      <if test="breakThree != null" >
        break_three = #{breakThree,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zyjz.bigdata.entity.BigDataConfig" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update big_data_config
    set rest_name = #{restName,jdbcType=VARCHAR},
      rest_water = #{restWater,jdbcType=DECIMAL},
      drp = #{drp,jdbcType=DECIMAL},
      year = #{year,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      break_one = #{breakOne,jdbcType=VARCHAR},
      break_two = #{breakTwo,jdbcType=VARCHAR},
      break_three = #{breakThree,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>